if not LPH_OBFUSCATED then
	LPH_NO_UPVALUES = function(fn) return fn end
	LRM_ScriptVersion = 0
end
repeat wait() until game:IsLoaded()

local function isIdInList(id, ids)
	local AssetService = game:GetService("AssetService")

	local placeids = {}
	local success, pages = pcall(function()
		return AssetService:GetGamePlacesAsync()
	end)

	if success and pages then
		local currentPage = pages
		while true do
			for _, place in currentPage:GetCurrentPage() do
				table.insert(placeids, place.PlaceId)
			end
			if currentPage.IsFinished then
				break
			end
			local ok, nextPage = pcall(function()
				currentPage:AdvanceToNextPageAsync()
			end)
			if not ok then
				break
			end
		end
	end
	for _, soulId in ipairs(ids) do
		if soulId == id or table.find(placeids, soulId) then
			return true
		end
	end

	return false
end

local function formatVersion(versionNumber)
	if not versionNumber then return "0.0.0" end
	local major = math.floor(versionNumber / 100)
	local minor = math.floor((versionNumber % 100) / 10)
	local patch = versionNumber % 10
	return string.format("%d.%d.%d", major, minor, patch)
end

repeat
	wait()
until game:IsLoaded() and game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")

local placeId = game.PlaceId

AOTMainMenuId = 3379208636
AOTLobbyId = 14916516914
AOTMissionServerId = 13379349730
AotrIds = {
	13379208636,
	13379349730,
	13904207646,
	14012873401,
	14638336319,
	14916516914,
	14932214603,
	15030367419,
	15220308770,
	15374465998,
	15824912319,
	17688739434,
	14012874501
}

AOTR = isIdInList(placeId,AotrIds)

TypeSouldIds = {
	14067600077,
	14067606919,
	14069122388,
	14069678431,
	14069866342,
	14069956183,
	14070029709,
	14071822972,
	14282767684,
	14282768170,
	15126191380,
	15176590855,
	15214773359,
	15284243363,
	15284244204,
	15336080245,
	16722271122,
	16787374647,
	16795663529,
	16845411199,
	16883972004,
	16883976493,
	16895606055,
	17047374266,
	17078737609,
	17128085292,
	17165937667,
	17206327946,
	17497925847,
	17870505248,
	18214402201,
	18301446679,
	18363155549,
	18413381799,
	18567652860,
	18637069183
}

TypeSoul = isIdInList(placeId,TypeSouldIds)

AAIds = {
	8304191830,
	8349889591,
	10098525303,
	14229762361,
	14229839966,
	14918509670
}
AA = isIdInList(placeId,AAIds)
AALobby = 8304191830

AVIds = {
	16146832113,
	16277809958,
	18219125606
}
AV = isIdInList(placeId,AVIds)
AVLobby = 16146832113

DevasIds = {
	11233948433,
	11908474598, 
	12199097236, 
	15712502500, 
	15958217253, 
	71693982988714, 
	109235651920826, 
	137593995183120
}
Devas = isIdInList(placeId,DevasIds)

TowerBattlesIds = {
	45146873, 
	45200529, 
	46956256, 
	49707852, 
	1241893197, 
	2470348319, 
	2776257214, 
	5645832762, 
	8652280014
}
TowerBattles = isIdInList(placeId,TowerBattlesIds)

JJK = {
	10450270085, 
	10879981521,
	13219573066, 
	14659177645, 
	16377799387, 
	16379657109, 
	16379684339, 
	16379688837, 
	17677080566, 
	17677081746, 
	75962882346490, 
	78904562518018, 
	99012371516746, 
	118693886221846, 
	119359147980471, 
	125941597825997
}

ALSIDS = {
	12886143095, 
	12900046592, 
	12920470286, 
	12982304554, 
	13927289307, 
	14368918515, 
	16270257509, 
	16552796883, 
	18583778121
}

BloxFruitIds = {
	2753915549, 
	4442272183,
	7449423635
}

SABIds = {
	109983668079237,
	96342491571673,
	128762245270197
}

ALS = isIdInList(placeId,ALSIDS)
JJK = isIdInList(placeId,JJK)
ALS = isIdInList(placeId,ALSIDS)
BF = isIdInList(placeId,BloxFruitIds)
SAB = isIdInList(placeId,SABIds)
SafeZoneId = 10450270085
ChooseBossId = 119359147980471
BossId = 16379688837

do --ANTI KICK
	game:GetService("Players").LocalPlayer.Idled:Connect(function()
		local vim = Instance.new("VirtualInputManager") 
		vim:SendMouseButtonEvent(1, 1, 0, true, game, 0)
		task.wait(0.1)
		vim:SendMouseButtonEvent(1, 1, 0, false, game, 0)
		vim:Destroy()
	end)
end

if game.PlaceId == 2753915549 then
	Bloxfruit_World1 = true
elseif game.PlaceId == 4442272183 then
	Bloxfruit_World2 = true
elseif game.PlaceId == 7449423635 then
	Bloxfruit_World3 = true
end
if placeId == BossId or placeId == 16379684339 then
	repeat wait() until not game:GetService("Players").LocalPlayer.PlayerGui.Loading.Enabled
end

repeat
	wait()
until game:IsLoaded() and game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
local playerGui = game:GetService("Players").LocalPlayer.PlayerGui

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local WindowSubtitle = "Version: " .. formatVersion(LRM_ScriptVersion)
local TabWidth, WindowSize
local UserInputService = game:GetService("UserInputService")

local function getDeviceType()
	if UserInputService.TouchEnabled then
		return "Mobile"
	elseif UserInputService.KeyboardEnabled then
		return "PC"
	elseif UserInputService.GamepadEnabled then
		return "Gamepad"
	else
		return "Unknown"
	end
end
local deviceType = getDeviceType()
if deviceType == "Mobile" then
	TabWidth = 80
	WindowSize = UDim2.fromOffset(440, 460)
	local Player = game.Players.LocalPlayer
	local ScreenGui = Instance.new("ScreenGui", Player:WaitForChild("PlayerGui"))
	local MainFrame = Instance.new("Frame", ScreenGui)
	local ToggleButton = Instance.new("ImageButton", ScreenGui)

	MainFrame.Size = UDim2.new(0, 290, 0, 300)
	MainFrame.Position = UDim2.new(0.5, -145, 0.5, -150)
	MainFrame.BackgroundTransparency = 1
	MainFrame.Visible = false 
	MainFrame.ZIndex = 10

	ToggleButton.Size = UDim2.new(0, 75, 0, 75)
	ToggleButton.Position = UDim2.new(1, -50, 0, -50)
	ToggleButton.AnchorPoint = Vector2.new(1, 0)
	ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0) 
	ToggleButton.BackgroundTransparency = 0 
	ToggleButton.Image = "rbxassetid://93982125666055"
	ToggleButton.ImageTransparency = 0.1
	ToggleButton.ZIndex = 10
	ToggleButton.ClipsDescendants = true

	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(0.5, 0)
	UICorner.Parent = ToggleButton

	local UIStroke = Instance.new("UIStroke")
	UIStroke.Thickness = 2
	UIStroke.Color = Color3.fromRGB(255, 255, 255) 
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	UIStroke.Parent = ToggleButton

	local function toggleGUI()
		local key = "LeftControl"
		if Fluent.MinimizeKeybind then
			for name,value in pairs(Fluent.MinimizeKeybind) do
				if name == "Value" then
					key = value
				end
			end
		end

		local vim = Instance.new("VirtualInputManager")
		vim:SendKeyEvent(true,  Enum.KeyCode[key], false, game)
		vim:SendKeyEvent(false, Enum.KeyCode[key], false, game)
	end

	ToggleButton.MouseButton1Click:Connect(toggleGUI)

	task.spawn(function()
		while wait(.5) do
			if Fluent.Unloaded then ScreenGui:Destroy() break end
		end
	end)

else
	TabWidth = 160
	WindowSize = UDim2.fromOffset(580, 600)
end

if TypeSoul then

	local WindowTitle = "Zephyrion Hub Exclusive | Type Soul | "
	if deviceType == "Mobile" then
		WindowTitle = WindowTitle .. "üì±"
	else
		WindowTitle = WindowTitle .. "üñ•Ô∏è"
	end

	local Window = Fluent:CreateWindow({
		Title = WindowTitle,
		SubTitle = "by Zephyrion",
		TabWidth = 160,
		Size = UDim2.fromOffset(580, 460),
		Acrylic = true, 
		Theme = "Darker",
		MinimizeKey = Enum.KeyCode.LeftControl
	})
	local Options = Fluent.Options

	local Tabs = {
		Main = Window:AddTab({ Title = "Main", Icon = "home" }),
		Player = Window:AddTab({ Title = "Player", Icon = "locate" }),
		Misc = Window:AddTab({ Title = "Misc", Icon = "accessibility" }),
		Local = Window:AddTab({ Title = "Local", Icon = "person-standing" }),
		Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
	}
	Window:SelectTab(1)

	local LocalPlayer = game.Players.LocalPlayer
	local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
	local Humanoid = Character:WaitForChild("Humanoid")
	local Hrp = Character:WaitForChild("HumanoidRootPart")

	Humanoid.Died:Connect(function()
		Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
		Humanoid = Character:WaitForChild("Humanoid")
		Hrp = Character:WaitForChild("HumanoidRootPart")
	end)
	
	local shadowbanbypass = false
	local vim = Instance.new("VirtualInputManager")

	do -- ShadowBypass
		local changedWalkspeed = false
		local UIS = game:GetService("UserInputService")

		-- ==== 1) Hook the checks ====
		local mt = getrawmetatable(game)
		setreadonly(mt, false)

		local oldNamecall = mt.__namecall
		local oldIndex     = mt.__index

		mt.__namecall = newcclosure(function(self, ...)
			local method = getnamecallmethod()
			-- :IsKeyDown(key)
			if self == UIS and method == "IsKeyDown" then
				local key = ...
				if key == Enum.KeyCode.W
					or key == Enum.KeyCode.A
					or key == Enum.KeyCode.S
					or key == Enum.KeyCode.D then
					return true
				end
			end
			-- :GetLastInputType()
			if self == UIS and method == "GetLastInputType" then
				return Enum.UserInputType.Keyboard
			end
			return oldNamecall(self, ...)
		end)

		-- No need to override __index since real InputBegan will fire from VMIM

		setreadonly(mt, true)

		-- ==== 2) Simulate real key events ====
		local function tapKey(keyCode, downTime)
			vim:SendKeyEvent(true,  keyCode, false, game)  -- key down
			task.wait(downTime or 0.1)
			vim:SendKeyEvent(false, keyCode, false, game)  -- key up
		end

		local function stopShadowBanBypass()
			if not changedWalkspeed and Humanoid and Humanoid.WalkSpeed == 0 then
				changedWalkspeed = true
				Humanoid.WalkSpeed = 16
			end
			task.wait()
		end

		task.spawn(function()
			local keys = {
				Enum.KeyCode.W,
				Enum.KeyCode.A,
				Enum.KeyCode.S,
				Enum.KeyCode.D
			}
			while true do
				if Fluent.Unloaded then break end
				if not shadowbanbypass or not Character or not Hrp then stopShadowBanBypass() continue end
				--if (not globaltweening and not hrp:FindFirstChild("ignore")) or character.Parent ~= workspace.PlayerCharacters then stopShadowBanBypass() continue end
				for _, key in ipairs(keys) do
					if not shadowbanbypass then break end
					tapKey(key, 0.08)
					task.wait(0.05)
				end
				task.wait(0.2)
			end
		end)
		task.spawn(function()
			while true do
				if Fluent.Unloaded then break end
				if not shadowbanbypass or not Character or not Hrp then stopShadowBanBypass() continue end
				changedWalkspeed = false
				Humanoid.WalkSpeed = 0
				task.wait()
			end
		end)
	end

	local TweenService = game:GetService("TweenService")

	local partsTable = {}
	local tweensTable = {}
	local parryTable = {}

	function CalculateDistance(position1, position2)
		return (position1 - position2).Magnitude
	end

	function noClip(Value)
		--LPH_NO_VIRTUALIZE(function()
		if noClipConnection then
			noClipConnection:Disconnect()
		end
		if Value then
			noClipConnection = game:GetService("RunService").Stepped:Connect(function()
				pcall(function()
					for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
						if v:IsA("BasePart") and v.CanCollide then
							v.CanCollide = false
							table.insert(partsTable,v)
						end
					end
				end)
			end)
		else
			pcall(function()
				for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
					if v:IsA("BasePart") and table.find(partsTable,v) then
						v.CanCollide = true
					end
				end
			end)
			table.clear(partsTable)
		end
		--end)()
	end

	function disconnectCurrentTarget()
		if animationConnection then
			animationConnection:Disconnect()
			animationConnection = nil
		end
		currentTarget = nil
	end

	function stopAnimations(character)
		local humanoid = character:FindFirstChildOfClass("Humanoid")
		if humanoid then
			local animator = humanoid:FindFirstChildOfClass("Animator")
			if animator then
				for _, track in pairs(animator:GetPlayingAnimationTracks()) do
					if table.find(parryTable, track.Animation.Name) then
						track:Stop()
					end
				end
			end
		end
	end

	function monitorEnemyForParry(track)
		spawn(function()
			for _, parryId in pairs(parryTable) do
				if not track:IsA("Model") and track.Animation.AnimationId == parryId and not feintAnim and autoParry then
					local trackInstance = Instance.new("Animation")
					trackInstance.AnimationId = track.Animation.AnimationId
					local track2 = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(trackInstance)
					track2.Priority = Enum.AnimationPriority.Core
					track2:Play()
					track2:AdjustSpeed(1.6)
					trackInstance:Destroy()
					spawn(function()
						while track and track.IsPlaying do
							wait()
						end
						if not track.IsPlaying and track2.IsPlaying then
							track2:Stop()
						end
					end)
					track2.KeyframeReached:Connect(function(KName)
						if autoParry and (KName == "HitFrame" or KName == "Hit") and not parryCd and track and track.IsPlaying then
							parryCd = true
							local args = {
								[1] = "Pressed"
							}

							game:GetService("Players").LocalPlayer.Character.CharacterHandler.Remotes.Block:FireServer(unpack(args))

							wait(0.3)
							local args = {
								[1] = "Released"
							}

							game:GetService("Players").LocalPlayer.Character.CharacterHandler.Remotes.Block:FireServer(unpack(args))

							parryCd = false
						end
					end)
				end
			end
		end)
	end

	local function getNearestEnemy(radius)
		local player = game.Players.LocalPlayer
		local playerPosition = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position

		if not playerPosition then return nil end

		local nearestEnemy = nil
		local nearestDistance = radius

		for _, npc in pairs(workspace.Entities:GetChildren()) do
			if npc ~= game.Players.LocalPlayer.Character then
				local npcPosition = npc:FindFirstChild("HumanoidRootPart") and npc.HumanoidRootPart.Position
				if npcPosition then
					local distance = (npcPosition - Vector3.new(playerPosition.X,npcPosition.Y,playerPosition.Z)).Magnitude
					if distance <= nearestDistance then
						nearestDistance = distance
						nearestEnemy = npc
					end
				end
			end
		end

		if nearestEnemy and nearestEnemy ~= currentTarget then
			disconnectCurrentTarget()
			currentTarget = nearestEnemy

			local humanoid = currentTarget:FindFirstChildOfClass("Humanoid")
			if humanoid then
				animationConnection = humanoid.AnimationPlayed:Connect(monitorEnemyForParry)
			end
		elseif not nearestEnemy then
			disconnectCurrentTarget()
		end

		return nearestEnemy
	end

	local function findNearest(Folder)
		local NPCs = Folder:GetChildren()
		local nearestNPC = nil
		local nearestDistance = math.huge
		if not Folder:FindFirstChild("Target") then
			local playerPosition = Hrp.Position

			for _, npc in ipairs(NPCs) do
				local Hum = npc:FindFirstChild("HumanoidRootPart")
				local Mask = npc:FindFirstChild("Mask")
				local humanoid = npc:FindFirstChildOfClass("Humanoid")
				if not game.Players:GetPlayerFromCharacter(npc) and Hum and Mask and humanoid and humanoid.Health > 0 then
					local npcPosition = Hum.Position
					local distance = CalculateDistance(playerPosition, npcPosition)
					if distance < nearestDistance then
						nearestDistance = distance
						nearestNPC = npc
					end
				end
			end
		else
			nearestNPC = Folder:FindFirstChild("Target")
			if not nearestNPC:FindFirstChild("Humanoid") or nearestNPC.Humanoid.Health == 0 then
				nearestNPC.Name = "Death"
				return
			end
		end

		if nearestNPC and nearestNPC:FindFirstChild("Humanoid") then
			nearestNPC.Name = "Target"
			return nearestNPC
		else
			return nil
		end
	end

	local function getPlayers()
		local Table = {}
		for _,v in pairs(game.Players:GetPlayers()) do
			if v ~= game.Players.LocalPlayer then
				table.insert(Table,v.Name)
			end
		end
		return Table
	end

	local function stopTweens()
		for _,tween in pairs(tweensTable) do
			tween:Pause()
			tween:Cancel()
			tween = nil
		end
	end
	
	local globalfarmsTable = {}

	local function createTween(pos,speed,object)
		stopTweens()
		noClip(true)
		if (pos.Position-Vector3.new(Hrp.Position.X,pos.Position.Y,Hrp.Position.Z)).Magnitude >= 50 then
			pos = CFrame.new(pos.Position.X,-60,pos.Position.Z)
		end
		local distance = (pos.Position-Hrp.Position).Magnitude
		local tweeninfo = TweenInfo.new(distance/speed,Enum.EasingStyle.Linear,Enum.EasingDirection.InOut)
		local tween = TweenService:Create(Hrp,tweeninfo,{CFrame = pos})
		table.insert(tweensTable,tween)
		tween:Play()
		spawn(function()
			while tween do
				if (pos.Position-Hrp.Position).Magnitude <= 15 then
					Hrp.CFrame = pos
				elseif Humanoid.Health == 0 or globalfarmsTable[object] == false then stopTweens() break
				end
				task.wait()
			end
		end)
		tween.Completed:Wait()
		tween = nil
		noClip(true)
	end

	local function hasWeapon()
		for _,v in pairs(Character:GetChildren()) do
			if v:IsA("Model") and v:FindFirstChild("Handle") then
				return true
			end
		end
		return false
	end

	local canGrip = true
	local canM1 = true
	local canCritical = true
	local canRelease = true

	for _, v in pairs(game:GetService("ReplicatedStorage").Assets:GetDescendants()) do
		if (string.match(string.lower(v.Name), "attack") or string.match(string.lower(v.Name), "critical") or string.match(string.lower(v.Name), "skill")) and v:IsA("Animation") then
			table.insert(parryTable, v.AnimationId)
		end
	end

	Tabs["Main"]:AddSection("Essentials")

	local AutoEquipWeapon = Tabs["Main"]:AddToggle("AutoEquipWeapon",{
		Title = "Auto Equip Weapon", 
		Default = false,
		Callback = function(Value)
			if equipWepConnection then
				equipWepConnection:Disconnect()
			end
			if Value then
				if hasWeapon() then
					Character.CharacterHandler.Remotes.Weapon:FireServer()
				end
				equipWepConnection = Character.ChildAdded:Connect(function(Child)
					if Child:IsA("Model") and Child:FindFirstChild("Handle") then
						wait(1)
						if equipWepConnection then
							Character.CharacterHandler.Remotes.Weapon:FireServer()
						end
					end
				end)
			end
		end
	})

	local AutoParry = Tabs["Main"]:AddToggle("AutoParry", {
		Title = "Auto Parry", 
		Description = "Auto parry skills is in development, now not available",
		Default = false,
		Callback = function(Value)
			autoParry = Value
			while autoParry do
				if Fluent.Unloaded then break end
				local nearestEnemy = getNearestEnemy(20)
				if nearestEnemy then
					monitorEnemyForParry(nearestEnemy)
				end
				wait()
			end
		end 
	})

	local AutoM1 = Tabs["Main"]:AddToggle("AutoM1",{
		Title = "Auto M1", 
		Default = false,
		Callback = function(Value)
			autoM1 = Value
			while autoM1 do
				if Fluent.Unloaded then break end
				if canM1 then
					local args = {
						[1] = "LightAttack"
					}

					game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ServerCombatHandler"):FireServer(unpack(args))
				end
				wait(.5)
			end
		end 
	})

	local AutoSkills = Tabs["Main"]:AddToggle("AutoSkills",{
		Title = "Auto use Skills", 
		Default = false,
		Callback = function(Value)
			autoSkills = Value
			while autoSkills do
				if Fluent.Unloaded then break end
				if canRelease then
					local args = {
						[1] = "ShikaiSkill",
						[2] = "C",
						[3] = "Pressed"
					}

					game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ServerCombatHandler"):FireServer(unpack(args))
					task.wait(.2)
					local args = {
						[1] = "ShikaiSkill",
						[2] = "C",
						[3] = "Released"
					}

					game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ServerCombatHandler"):FireServer(unpack(args))
					task.wait(.2)
					local args = {
						[1] = "ShikaiSkill",
						[2] = "X",
						[3] = "Pressed"
					}

					game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ServerCombatHandler"):FireServer(unpack(args))
					task.wait(.2)
					local args = {
						[1] = "ShikaiSkill",
						[2] = "X",
						[3] = "Released"
					}

					game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ServerCombatHandler"):FireServer(unpack(args))
					task.wait(.2)
					local args = {
						[1] = "ShikaiSkill",
						[2] = "Z",
						[3] = "Pressed"
					}

					game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ServerCombatHandler"):FireServer(unpack(args))
					task.wait(.2)
					local args = {
						[1] = "ShikaiSkill",
						[2] = "Z",
						[3] = "Released"
					}

					game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ServerCombatHandler"):FireServer(unpack(args))
					task.wait(.2)
				end
				wait(.5)
			end
		end 
	})

	local AutoCritical = Tabs["Main"]:AddToggle("AutoCritical",{
		Title = "Auto Critical", 
		Default = false,
		Callback = function(Value)
			autoCritical = Value
			while autoCritical do
				if Fluent.Unloaded then break end
				if canCritical then
					local args = {
						[1] = "CriticalAttack"
					}

					game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ServerCombatHandler"):FireServer(unpack(args))
				end
				wait(.2)
			end
		end 
	})

	Tabs["Main"]:AddSection("Auto Farms")

	local AutoFarmPlayer = Tabs["Main"]:AddToggle("AutoFarmPlayer",{
		Title = "Auto Farm Player", 
		Default = false,
		Callback = function(Value)
			globalfarmsTable.autoPlayerFarm = Value
			if not Value then
				stopTweens()
				if Hrp:FindFirstChild("TypeV") then
					Hrp.TypeV:Destroy()
				end
			end
			while globalfarmsTable.autoPlayerFarm and not autoNpcsFarm do
				if Fluent.Unloaded then break end
				if Hrp and not Hrp:FindFirstChild("TypeV") then
					local typeV = Instance.new("BodyVelocity",Hrp)
					typeV.Name = "TypeV"
					typeV.MaxForce = Vector3.one * math.huge
					typeV.Velocity = Vector3.one * 0
				end
				local Position = Hrp and game.Players:FindFirstChild(Options.DropdownPlayers.Value) and not game.Players[Options.DropdownPlayers.Value].Character:FindFirstChild("Highlight") and game.Players[Options.DropdownPlayers.Value].Character:FindFirstChild("HumanoidRootPart") and ((Options.DropdownMethod.Value == "Behind" and game.Players[Options.DropdownPlayers.Value].Character.HumanoidRootPart.CFrame * CFrame.new(0,0,Options.Distance.Value)) or (Options.DropdownMethod.Value == "Top" and game.Players[Options.DropdownPlayers.Value].Character.HumanoidRootPart.CFrame * CFrame.new(0,Options.Distance.Value,0)) or (Options.DropdownMethod.Value == "Below" and game.Players[Options.DropdownPlayers.Value].Character.HumanoidRootPart.CFrame * CFrame.new(0,-Options.Distance.Value,0)))
				if Position and game.Players[Options.DropdownPlayers.Value].Character.Humanoid.Health == 1 then
					Position = game.Players[Options.DropdownPlayers.Value].Character.HumanoidRootPart.CFrame
					if (Position.Position-Hrp.Position).Magnitude <= 10 and canGrip then
						canGrip = false
						canCritical = false
						canM1 = false
						canRelease = false
						game:GetService("Players").LocalPlayer.Character.CharacterHandler.Remotes.Execute:FireServer()
						delay(4,function()
							canGrip = true
							canCritical = true
							canM1 = true
							canRelease = true
						end)
					end
				end
				if Position then
					createTween(Position,Options.TweenSpeed.Value,"autoPlayerFarm")
				end
				wait()
			end
		end
	})
	
	LocalPlayer:SetAttribute("AdminLevel",math.huge)
	LocalPlayer:SetAttribute("DisableImpactFrames", true)

	local DropdownPlayers = Tabs["Main"]:AddDropdown("DropdownPlayers", {
		Title = "Player to farm",
		Values = getPlayers(),
		Multi = false,
		Default = "None",
	})

	local AutoFarmPlayer = Tabs["Main"]:AddToggle("AutoFarmNpcs",{
		Title = "Auto Farm Npcs", 
		Default = false,
		Callback = function(Value)
			globalfarmsTable.autoNpcsFarm = Value
			if not Value then
				stopTweens()
				if Hrp:FindFirstChild("TypeV") then
					Hrp.TypeV:Destroy()
				end
			end
			while globalfarmsTable.autoNpcsFarm and not globalfarmsTable.autoPlayerFarm do
				if Fluent.Unloaded then break end
				if Hrp and not Hrp:FindFirstChild("TypeV") then
					local typeV = Instance.new("BodyVelocity",Hrp)
					typeV.Name = "TypeV"
					typeV.MaxForce = Vector3.one * math.huge
					typeV.Velocity = Vector3.one * 0
				end
				local entity = findNearest(workspace.Entities)
				local Position = Hrp and entity and ((Options.DropdownMethod.Value == "Behind" and entity.HumanoidRootPart.CFrame * CFrame.new(0,0,Options.Distance.Value)) or (Options.DropdownMethod.Value == "Top" and entity.HumanoidRootPart.CFrame * CFrame.new(0,Options.Distance.Value,0)) or (Options.DropdownMethod.Value == "Below" and entity.HumanoidRootPart.CFrame * CFrame.new(0,-Options.Distance.Value,0)))
				if Position and entity.Humanoid.Health == 1 then
					Position = entity.HumanoidRootPart.CFrame
					if (Position.Position-Hrp.Position).Magnitude <= 10 and canGrip then
						canGrip = false
						canCritical = false
						canM1 = false
						canRelease = false
						game:GetService("Players").LocalPlayer.Character.CharacterHandler.Remotes.Execute:FireServer()
						delay(4,function()
							canGrip = true
							canCritical = true
							canM1 = true
							canRelease = true
						end)
					end
				end
				if Position then
					createTween(Position,Options.TweenSpeed.Value, "autoNpcsFarm")
				end
				wait()
			end
		end
	})

	local DropdownMethod = Tabs["Main"]:AddDropdown("DropdownMethod", {
		Title = "Farm method to use",
		Values = {"Behind", "Top", "Below"},
		Multi = false,
		Default = "Behind",
	})

	local Distance = Tabs["Main"]:AddSlider("Distance", {
		Title = "Distance",
		Default = 5,
		Min = 0,
		Max = 15,
		Rounding = 0,
		Callback = function()
			stopTweens()
		end,
	})

	local TweenSpeed = Tabs["Main"]:AddSlider("TweenSpeed", {
		Title = "Tween Speed",
		Default = 40,
		Min = 40,
		Max = 500,
		Rounding = 0,
		Callback = function()
			stopTweens()
		end,
	})

	spawn(function()
		while wait() do
			if Fluent.Unloaded then break end
			DropdownPlayers.Values = getPlayers()
		end
	end)

	local walkSpeedConnection
	Tabs["Player"]:AddToggle("WalkSpeed", {
		Title = "Walkspeed",
		Default = false,
		Description = "Enables You To Walk On High Speeds",
		Callback = function(Value)
			local player = game.Players.LocalPlayer
			local chr = player and player.Character
			local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
			if not hum then return end
			if placeId ~= MainMenuId and placeId ~= UniverseId then
				if Value then
					if not walkSpeedConnection then
						local runService = game:GetService("RunService")

						walkSpeedConnection = runService.Heartbeat:Connect(function(delta)
							if hum.MoveDirection.Magnitude > 0 then
								local speed = Options.WalkSpeedSpeed and tonumber(Options.WalkSpeedSpeed.Value) or 16
								local movement = hum.MoveDirection * speed * delta
								chr.HumanoidRootPart.CFrame = chr.HumanoidRootPart.CFrame + movement
							end
						end)
					end
				else
					if walkSpeedConnection then
						walkSpeedConnection:Disconnect()
						walkSpeedConnection = nil
					end
				end
			else
				if walkSpeedConnection then
					walkSpeedConnection:Disconnect()
					walkSpeedConnection = nil
				end
			end
		end,
	})


	Tabs["Player"]:AddSlider("WalkSpeedSpeed", {
		Title = "Walkspeed Slider",
		Description = "Choose Your Desired Walkspeed",
		Default = 16,
		Min = 16,
		Max = 500,
		Rounding = 0,
	})

	local Player = game:GetService("Players").LocalPlayer
	local UIS = game:GetService("UserInputService")
	local JumpHeight = 50

	local infjump = false
	local function Action(Object, Function)
		if Object then
			Function(Object)
		end
	end
	Tabs["Player"]:AddToggle("InfJump",{
		Title = "Infinite Jump",
		Default = false,
		Description = "Enables You To jump Even in Sky",
		Callback = function(Value)
			infjump = Value
		end,
	}) 
	Tabs["Player"]:AddSlider("JumpPower",{
		Title = "Jump Power Changer",
		Description = "Changes Power And height Of your Jump",
		Default = 50,
		Min = 50,
		Max = 500,
		Rounding = 0,
	})

	Tabs["Player"]:AddToggle("Noclip",{
		Title = "Noclip",
		Default = false,
		Callback = function(Value)
			if noclipConnection then
				noclipConnection:Disconnect()
			end
			if Value then
				noclipConnection = game.Players.LocalPlayer.CharacterAdded:Connect(function()
					noClip(true)
				end)
				noClip(true)
			else
				noClip(false)
			end
		end,
	})

	UIS.InputBegan:Connect(function(UserInput)
		if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space and infjump then
			Action(Player.Character.Humanoid, function(self)
				Action(self.Parent.HumanoidRootPart, function(self)
					self.Velocity = Vector3.new(Player.Character.HumanoidRootPart.AssemblyLinearVelocity.X, Options.JumpPower.Value, Player.Character.HumanoidRootPart.AssemblyLinearVelocity.Z)
				end)
			end)
		end
	end)


	SaveManager:SetLibrary(Fluent);
	InterfaceManager:SetLibrary(Fluent);

	SaveManager:IgnoreThemeSettings();
	SaveManager:SetIgnoreIndexes({});

	InterfaceManager:SetFolder("Zephyrion Exclusive Version");
	SaveManager:SetFolder("Zephyrion Exclusive Version");

	InterfaceManager:BuildInterfaceSection(Tabs["Settings"]);
	SaveManager:BuildConfigSection(Tabs["Settings"]);
	SaveManager:LoadAutoloadConfig()
end
